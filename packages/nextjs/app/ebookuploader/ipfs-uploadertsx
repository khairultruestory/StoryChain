'use client'

import { useState } from 'react'
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { AlertCircle, CheckCircle2, Upload } from "lucide-react"

// Mock IPFS upload function
const mockIpfsUpload = async (file: File): Promise<{ hash: string, url: string }> => {
  return new Promise((resolve) => {
    setTimeout(() => {
      const hash = 'Qm' + Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)
      const url = `https://ipfs.io/ipfs/${hash}`
      resolve({ hash, url })
    }, 2000)
  })
}

export default function IpfsUploader() {
  const [file, setFile] = useState<File | null>(null)
  const [uploading, setUploading] = useState(false)
  const [result, setResult] = useState<{ hash: string, url: string } | null>(null)
  const [error, setError] = useState<string | null>(null)

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setFile(e.target.files[0])
      setError(null)
      setResult(null)
    }
  }

  const handleUpload = async () => {
    if (!file) {
      setError('Please select a file to upload')
      return
    }

    setUploading(true)
    setError(null)
    setResult(null)

    try {
      const result = await mockIpfsUpload(file)
      setResult(result)
    } catch (err) {
      setError('Failed to upload file to IPFS')
    } finally {
      setUploading(false)
    }
  }

  return (
    <Card className="w-full max-w-md mx-auto">
      <CardHeader>
        <CardTitle className="text-2xl font-bold">IPFS File Uploader</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <Input
            type="file"
            onChange={handleFileChange}
            disabled={uploading}
            className="file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100"
          />
          <Button onClick={handleUpload} disabled={!file || uploading} className="w-full">
            {uploading ? (
              <>
                <Upload className="mr-2 h-4 w-4 animate-spin" />
                Uploading...
              </>
            ) : (
              <>
                <Upload className="mr-2 h-4 w-4" />
                Upload to IPFS
              </>
            )}
          </Button>

          {error && (
            <div className="flex items-center text-red-500">
              <AlertCircle className="mr-2 h-4 w-4" />
              {error}
            </div>
          )}

          {result && (
            <div className="space-y-2">
              <div className="flex items-center text-green-500">
                <CheckCircle2 className="mr-2 h-4 w-4" />
                File uploaded successfully!
              </div>
              <div>
                <strong>IPFS Hash:</strong> {result.hash}
              </div>
              <div>
                <strong>IPFS URL:</strong>{' '}
                <a href={result.url} target="_blank" rel="noopener noreferrer" className="text-blue-500 hover:underline">
                  {result.url}
                </a>
              </div>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  )
}